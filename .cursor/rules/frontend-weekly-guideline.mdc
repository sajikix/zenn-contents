---
description: Cybozu Frontend Weeklyの記事生成方法
globs: articles/*.md
alwaysApply: false
---
## Steps
1. 指定したURLのコンテンツをクロールしテキストを抽出する
1. テキストから本文だけを抽出する
1. 本文の内容を要約し、与えられたガイドラインとフォーマット、参考となる出力例に従って要約内容を出力する

## Output Format

以下のmarkdownk形式で執筆してください。

## 記事タイトル

記事へのリンク

内容

## 文体のガイドライン

### 1. 基本的な文体
- です・ます調を基本とする
- 客観的で簡潔な文章を心がける

### 2. 内容の執筆方法
- 「〜が発表されました」「〜が公開されました」など、事実を述べる表現を使用
- 著者や組織の発言を引用する場合は「〜とのことです」「〜と述べています」などの表現を使用
- なるべく端的に。多くても3〜5行程度

### 3. リンクの執筆方法
- 見出しの下に単独で配置
- 装飾はせず、入力されたURLをそのまま見出しの下に配置

### 4. 見出しの付け方
- 基本的にURLのtitle属性をそのまま。SNSなどでtitle属性がリーダブルじゃない場合は端的に記事内容を表すものをつけても良い。

## 参考となる出力例
---
## Typewind

https://typewind.vercel.app/

Tailwind CSS のユーティリティクラスを type-safe に扱えるライブラリです。Zero Bundle Size や `tailwind.config.js` をベースに型を生成する点、エディタの拡張が必要ない点、また、Next.js や SolidStart、Vite などのフレームワークをサポートしてる点が挙げられています。

Tailwind CSS のユーティリティクラスに対して静的解析したい場合に、導入を検討できそうです。

## Unlock New Possibilities with Hybrid Rendering

https://astro.build/blog/hybrid-rendering/

Astro v2 で新しく追加された Hybrid Rendering の記事です。

この Hybrid Rendering を利用することで画面ごとに SSG か SSR かを選択できるようになりました。この記事では、画面ごとのレンダリング方法の判別に、ビルド時の静的解析を用いたり、 `export const prerender = true` のように明示的な指定をできることが紹介されています。また、Hybrid Rendering のユースケースもいくつか紹介されているので、どの様な場合に利用できるか参考になりそうです。

## If you use React, you should be using a React framework

https://twitter.com/acdlite/status/1617611126514266112?s=46&t=mjRBYqR2Pn6e94alL2aiRQ

React コアチームの[Andrew Clark](mdc:https:/twitter.com/acdlite)が React を利用する場合はフレームワークを採用した方が良いとツイートした話です。

Frontend Weekly の中では、React では特に v18 で追加された `useSyncExternalStore` や `useTransition` のようにフレームワークで利用するような API 設計に変わってきており、また、ルーティングやチャンク分割などパフォーマンスのことを考慮するとフレームワークを経由して React を使うのは自然な流れになりそうと話していました。

合わせて、[Create React App の今後について](mdc:https:/github.com/reactjs/reactjs.org/pull/5487#issuecomment-1409720741)も話題に上がりました。

## The Future (and the Past) of the Web is Server Side Rendering

https://deno.com/blog/the-future-and-past-is-server-side-rendering

今後、Web アプリケーションは Client Side Rendering(CSR)から Server Side Rendering(SSR)が主流になるのでは、という内容の記事が Deno から公開されました。

Deno では、SSR でのハイドレーションには Islands Architecture を採用することが気に入ってるそうです。(実際に Deno の Web フレームワークである Fresh では Islands Architecture が採用されている)。

また、この記事に関連して次のような話題で盛り上がっていました。

- 昔と比べて Edge や Vercel などのホスティングサービスの登場によって SSR がやりやすくなった
- フレームワークとホスティングの関係性も変わってきている
- [Cloudflare の記事](mdc:https:/blog.cloudflare.com/ja-jp/welcome-to-the-supercloud-and-developer-week-2022-ja-jp)で Supercloud って言葉が紹介されていた

## Next.js に追加予定の機能

### `<Link>` を利用する際に Next.js のファイルルーティングに合わせた型が利用できるように

https://twitter.com/shuding_/status/1620137501192253440

### SEO で利用する様な metadata を app ディレクトリの layout でオブジェクトとして定義できるように

https://twitter.com/leeerob/status/1619743437577912321

## Netlify Acquires Gatsby Inc. to Accelerate Adoption of Composable Web Architectures

https://www.netlify.com/press/netlify-acquires-gatsby-inc-to-accelerate-adoption-of-composable-web-architectures/

Netfily が Gatsby を買収しました。記事の中では具体的な今後の取組等は特に記載されていませんでしたが、Gatsby と Netlify の動向が気になりますね。

## Interop 2023: continuing to improve the web for developers

https://web.dev/interop-2023/

ブラウザの互換性を向上するための取組が Interop2023 として継続して行われることが紹介されています。

Interop2023 では、26 個以上の機能にフォーカスしています。具体的には次の機能のように、Web アプリケーションを開発する上で利用できる便利な機能のブラウザの互換性を向上を目標にしている様です。

- Container Queries in CSS
- Custom Properties in CSS
- Media Query4
- Flexbox
- Grid
- `:has()`
- Web Components

## Turbopack が webpack loader をサポート

https://twitter.com/jaredpalmer/status/1619071988181651456

Turbopack で webpack loader が読み込める様になる機能が canary に実装され、次のリリースに入りそうです。

このツイートからも、Turbopack へ移行する際に、問題になりそうな webpack loader を重要視して開発チームが取り組んでいることが伺えます。また、[Turbopack(Rust)と webpack loader(Node.js)のやりとりは IPC ペース](mdc:https:/twitter.com/jaredpalmer/status/1619074649630842880)で行うそうです。

## tc39 のミーティングが開催され、プロポーザルの stage が変わりました

https://twitter.com/robpalmer2/status/1621234674327605248

次のプロポーザルが stage4 になりました。

- Change Array by Copy
- Intl.NumberFormat V3
- Symbols as WeakMap keys

配列に対してソートなどの操作を immutable に行える Change Array by Copy は便利で良さそうです。

## Learn Images

https://web.dev/learn-images/

web.dev の Learn シリーズに画像のコースが新しく追加されました。

画像フォーマットの特徴(GIF, PNG, JPEG など)や画像のパフォーマンス、`<picture>` を利用したレスポンシブな画像の実装方法などが紹介されています。

## Component Story Format 3 is here

https://storybook.js.org/blog/storybook-csf3-is-here/

Storybook の Component Story Format 3(CSF) が完全にリリースされました。以前から CSF3 は利用できましたが、`useEvent` が内部でバージョンアップされたり、Story のタイトルがディレクトリ構造に合わせて自動で生成されるようになっています。

## Resumable React: How To Use React Inside Qwik

https://www.builder.io/blog/resumable-react-how-to-use-react-inside-qwik

Qwik アプリケーションの中で、React のランタイムなしに React コンポーネントを読み込む方法を紹介しています。

`host:onClick$={() => {}}` のように [`host:` ディレクティブ](mdc:https:/qwik.builder.io/integrations/integration/react/#listen-to-dom-events-without-hydration) を利用することでハイドレーションせずに DOM のイベントを listen することで実現しています。

なお、記事内で紹介されている機能はまだ beta 版とのことです。

## PSOne.css

https://micah5.github.io/PSone.css/

この CSS フレームワークを使って FF7 のメニュー画面を作りましょう。



## feat(next): `next.config.ts` by devjiwonchoi · Pull Request #63051 · vercel/next.js

https://github.com/vercel/next.js/pull/63051

Next.jsの設定ファイルをTypeScriptで書けるようになりました。`next.config.ts`に設定ファイルを記述することができます。

## Using pnpm on Heroku

https://blog.heroku.com/using-pnpm-on-heroku

HerokuのNode.js buildpackが、パッケージマネージャの1つであるpnpmをサポートしました。pnpmを使用すると、npmに比べてデプロイ時のパッケージインストールが10~40%程度高速になるようです。

## Page Speed Benchmarks | SpeedCurve

https://app.speedcurve.com/benchmarks/japan/media/fast/start-render/

[SpeedCurve](mdc:https:/www.speedcurve.com)というサービスが提供する、主要なWebサイトのパフォーマンスのベンチマークが確認できるダッシュボードです。

次の記事では、このダッシュボードで公開されているパフォーマンス結果を元に、多くのサイトで活用されていないパフォーマンスの最適化方法を紹介しています。

https://www.speedcurve.com/blog/15-neglected-page-speed-optimizations/

## HTML Tags Memory Test

https://codepen.io/plfstr/full/zYqQeRw

HTML Tagsを何個覚えているかをテストするサイトです。

## July 22, 2024 Release – React Spectrum Release

https://react-spectrum.adobe.com/releases/2024-07-22.html

React Spectrumの7月のリリースノートです。

コンポーネントの仮想化の実装を大幅に改善し、バンドルサイズの縮小と、パフォーマンス・安定性の向上が実現されました。スクロールに伴うDOMノードの再利用が改善されたため、テストでは大きなテーブルのフレームごとのレンダリング時間が14倍高速化されたようです。

## Understanding the ‘Why’ behind some basic UI design practices

https://bootcamp.uxdesign.cc/understanding-the-why-behind-some-basic-ui-design-practices-b5d162d6bbd4

よくあるUIデザインのプラクティスの背景にある「Why」を理解する記事です。

例えば、次のような疑問に回答しています。

- `padding`や`gap`はなぜ4または8の倍数が良いのか
- 小数点での`px`指定はなぜ良くないのか
- アイコンのサイズはなぜ24x24なのか

## Failed to import package that contained deno workspace · Issue #1131 · denoland/vscode_deno

https://github.com/denoland/vscode_deno/issues/1131

[Deno v1.45](mdc:https:/deno.com/blog/v1.45)で実装されたworkspace機能がVSCode拡張で正しく動かなかった不具合が、Deno v1.45.4で修正されました。

## Intent to End OCSP Service

https://letsencrypt.org/2024/07/23/replacing-ocsp-with-crls.html

Let's Encryptが、Online Certificate Status Protocol (OCSP)のサポートを終了し、Certificate Revocation Lists (CRLs) に移行することを発表しました。

Webサイトやそのサイトを訪問するユーザーは影響を受けませんが、一部の非ブラウザソフトウェアは影響を受ける可能性があります。VPNなどブラウザ以外の通信を保護するためにLet's Encrypt証明書を使用している場合、OCSP URLがない状態でも正常に動作することを確認する必要があります。

## Keyboard-Only Scrolling Areas

https://adrianroselli.com/2022/06/keyboard-only-scrolling-areas.html

キーボード操作のみでスクロール可能な領域にアクセスできることの重要性と、非対応ブラウザでのユーザ向けソリューションについて言及している記事です。

スクロールコンテナをキーボードフォーカス可能にする機能の主要ブラウザの実装状況は次のとおりです

- Firefox: サポート済み
- Chrome: 127で追加され、128で全ユーザが利用可能になる予定
- Safari: 未サポート

## Line-breakable `<ruby>` and CSS ruby-align property

https://developer.chrome.com/blog/line-breakable-ruby?hl=en

Chrome 128以降で`<ruby>`が改行できるようになります。`ruby-align`でルビの位置を調整できます。

## Storybook 8.2

https://storybook.js.org/blog/storybook-8-2/

Storybook 8.2がリリースされました。主に次の機能が追加されました。

- Jest/Vitest/Playwright/Cypressなどのテストツールと同等のtest hooksの提供
- Portable storiesをReact、Vue3でサポート（Svelteはexperimental）
- 18のパッケージを1つのコアパッケージ（`storybook`）に統合
- ドキュメントサイトを改善し、各フレームワークごとに導入方法を記載

## Turbopack updates: Moving homes – Vercel

https://vercel.com/blog/turbopack-moving-homes

Vercelが開発しているJavaScript/TypeScriptバンドラであるTurbopackの最新情報についての記事です。主なポイントは次の通りです。

- TurbopackはNext.jsのテストケースを100%パスしており、Next.jsのExamplesでTurbopackが動作する
- 上位300のnpmパッケージ（指標には言及がありませんでした）がTurbopackでビルドできることを確認した
- Vercel.comの開発に使用されている
- Turbopackのコードは今後`vercel/turbo`から`vercel/next.js`に移動する
  - 開発速度向上が目的でNext.jsのみをサポートすることを意図していない
- Turbopackのコアはフレームワークに依存しない設計を維持

## New to the web platform in July

https://web.dev/blog/web-platform-07-2024?hl=en

7月にWebブラウザに追加された、安定版またはベータ版の機能を紹介する記事です。Firefox 128、Safari 17.6、Chrome 127が安定版になりました。

## Rust製ブラウザエンジン「Servo」搭載、新たなWebブラウザ「Verso」の開発プロジェクトが立ち上がる

https://www.publickey1.jp/blog/24/rustservowebverso.html

NLnet Foundationは、Rust製ブラウザエンジン「Servo」を用いたWebブラウザ「Verso」の開発プロジェクトの立ち上げを発表しました。Electron代替を目指すフレームワーク[Tauri](mdc:https:/tauri.app)の開発チームが主導するそうです。

## Node v22.6.0 (Current)

https://nodejs.org/en/blog/release/v22.6.0

Node.jsのv22.6.0がリリースされました。

`--experimental-strip-types`フラグを使用することで、TypeScriptファイルを実行できるようになりました。ただし、次のような制約があります。

- インライン型アノテーションのみに対応
- モジュールインポートに明示的なファイル拡張子が必要
- 型のインポートには`type`キーワードを使う必要がある
- `node_modules`はデフォルトでTypeScriptが無効化される

## React / Remix への依存を最小にするフロントエンド設計 - 一休.com Developers Blog

https://user-first.ikyu.co.jp/entry/2024/08/05/142626

一休レストランでのライブラリ依存を少なくするフロントエンド設計を紹介する記事です。

## Linear Matching of JavaScript Regular Expressions | Proceedings of the ACM on Programming Languages

https://dl.acm.org/doi/10.1145/3656431

計算量爆発をしない新しい正規表現アルゴリズムを提案する論文です。すでにV8にマージされているようです。

## Google Online Security Blog: Improving the security of Chrome cookies on Windows

https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html

Chrome 127で導入された、WindowsのCookieのセキュリティを向上する、App-Bound Encryptionという保護レイヤーを紹介する記事です。

## HTML attributes vs DOM properties

https://jakearchibald.com/2024/attributes-vs-properties/

HTML attributes と DOM properties の動作の違いについて解説している記事です。
Validation、値のチェック、デフォルト値、フレームワークに応じた挙動などについてまとめられています。

## Deep Dive into React Stream/Serialize

https://speakerdeck.com/mugi_uno/serialize

React の Stream/Serialize に関連する RSC Payload の読み方を解説している資料です。

## Parcel における コアの Rust 置き換えに関して

https://x.com/devongovett/status/1789796247483937045

Percel コアの Rust 置き換えに関しての状況や効果についての X ポストです。
マルチコアを活用できることで、おおよそ 20 倍高速化するとのことです。

## pnpm の node_modules を探検して理解しよう - ドワンゴ教育サービス開発者ブログ

https://blog.nnn.dev/entry/2024/05/10/110000

npm における node_modules の問題点と、pnpm を利用した場合にそれらをどうやって解決しているかについての記事です。実際にディレクトリの内容を例として見ながら、ディレクトリ構造やシンボリックリンクの活用について解説されています。

## The Forensics Of React Server Components (RSCs)

https://www.smashingmagazine.com/2024/05/forensics-react-server-components/

CSR, SSR の特徴と、なぜ RSC が登場したのかに加えて、SSR Streaming を実際にデバッグしながら、どういった流れで Stream が処理されるかを解説した記事です。

## Node.js の進化に伴い不要となったかもしれないパッケージたち

https://zenn.dev/morinokami/articles/npm-uninstall

従来 Node.js での開発時に利用頻度の高かったライブラリ群について、現在では Node.js 標準で利用可能となっている機能をまとめた記事です。Dotenv, Chalk, glob 相当の機能などについて紹介されています。

## WebKit Features in Safari 17.5 | WebKit

https://webkit.org/blog/15383/webkit-features-in-safari-17-5/

Safari 17.5 での WebKit の新機能についての記事です。CSS における `text-wrap: balance` や `light-dark()`、`@import` におけるルールクエリや、WebGL、WebView などの変更を含みます。

## Figma’s journey to TypeScript | Figma Blog

https://www.figma.com/ja-jp/blog/figmas-journey-to-typescript-compiling-away-our-custom-programming-language/

Figma におけるモバイル向けのレンダリングアーキテクチャを、Skew というカスタムのプログラミング言語から、TypeScript へ移行したことに関する記事です。
社外エコシステムとの協調の難しさや、WASM によるパフォーマンスの改善によって Skew のアドバンテージが薄まったことなどが要因とのことです。

## React Compiler – React

https://react.dev/learn/react-compiler

React のドキュメントに React Compiler のページが追加されました。各種フレームワークでの使い方なども紹介されています。Next.js 側でも、React Compiler を利用する [PR](mdc:https:/github.com/vercel/next.js/pull/65804) が作成されました。

## Merging Remix and React Router

https://remix.run/blog/merging-remix-and-react-router

Remix v3 としてリリース予定だった機能が React Router v7 としてリリースされることになり、その経緯や、今後の Remix の位置づけについての記事です。

## WCAG 3 Introduction

https://www.w3.org/WAI/standards-guidelines/wcag/wcag3-intro/

Web アクセシビリティに関するガイドラインである WCAG 3.0 の Working Draft が公開されました。併せて、WCAG 3.0 のプロジェクトマネージャーである Wilco Fiers 氏による、WCAG 3.0 の概要について解説した [W3C unveils 174 new outcomes for WCAG 3.0](mdc:https:/www.deque.com/blog/w3c-unveils-174-new-outcomes-for-wcag-3-0) という記事も公開されています。
